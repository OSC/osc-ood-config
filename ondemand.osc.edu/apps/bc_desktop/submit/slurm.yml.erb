
<%- 
  base_slurm_args = ["--nodes", "#{bc_num_slots}"]
  base_slurm_args.concat ["--licenses", "#{licenses}"] unless licenses.empty?

  def any_node
    [ "--ntasks-per-node", "#{cores}" ]
  end

  def p18_node
    return [ "--ntasks-per-node", "#{cores}", "--constraint", "40core" ]
  end

  def p20_node
    return [ "--ntasks-per-node", "#{cores}", "--constraint", "48core" ]
  end

  gpus = cluster == 'pitzer' ? 2 : 1
  hugemem_cpus = cluster == 'pitzer' ? 80 : 48

  slurm_args = case node_type
              # 'any' case handled by scheduler, this is just a quick short circuit
              when "any"
                base_slurm_args + any_node

              when "any-40core"
                base_slurm_args + p18_node
              when "any-48core"
                base_slurm_args + p20_node

              when "gpu-any"
                base_slurm_args + any_node + ["--gpus-per-node", "#{gpus}"]
              when "gpu-40core"
                base_slurm_args + p18_node + ["--gpus-per-node", "#{gpus}"]
              when "gpu-48core"
                base_slurm_args + p20_node + ["--gpus-per-node", "#{gpus}"]
              when "vis"
                base_slurm_args + any_node + ["--gpus-per-node", "#{gpus}", "--gres", "vis"]
              when "densegpu"
                base_slurm_args + p20_node + ["--gpus-per-node", "4"]

              # using partitions here is easier than specifying memory requests
              when "largemem"
                partition = bc_num_slots.to_i > 1 ? "largemem-parallel" : "largemem"
                base_slurm_args + p20_node + ["--partition", partition ]
              when "hugemem"
                partition = bc_num_slots.to_i > 1 ? "hugemem-parallel" : "hugemem"
                base_slurm_args + [ "--ntasks-per-node", "#{hugemem_cpus}", "--partition", partition ]

              else
                base_slurm_args
              end
-%>
---
batch_connect:
  before_script: |
    # Export the module function if it exists
    [[ $(type -t module) == "function"  ]] && export -f module

    # MATE acts strange in pitzer-exp and doesn't like /var/run/$(id -u)
    export XDG_RUNTIME_DIR="$TMPDIR/xdg_runtime"

script:
  accounting_id: "<%= account %>"
  native:
    <%- slurm_args.each do |arg| %>
    - "<%= arg %>"
    <%- end %>
